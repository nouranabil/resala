= Introduction 

CompactFlags comes to serve models with several boolean flags. in large data volumes where the flags can be used to slice the data in several ways. queries tend to be heavier and more indexes are needed by time.

this plugin is made so it can store several flags in one integer attribute through bit wise operations. the attribute represents the state of each record. And is much more performant in database queries

= Installation

  ruby script/plugin install http://github.com/modsaid/compact-flags.git

or just checkout/download the plugin to vendor/plugins

= Database Migrations

The generators are yet to be developed, currently you need to add an integer column only to your model. which will be used later as the flags store
currently you can just use a migration that adds inter column like below:

  class AddRoles < ActiveRecord::Migration
    def self.up
      add_column :users, :roles, :integer, :null=>false, :default=>0
      add_column :users, :status, :integer, :null=>false, :default=>0
    end
    def self.down
      remove_column :users, :roles
      remove_column :users, :status
    end
  end



== Usage example

After adding the plugin and creating an integer column, for example: "roles" & "status", to your model, add the "compact_flags" lines passing the flags store column name, and the array of flags

  class User < ActiveRecord::Base
    compact_flags :roles  => [:admin, :moderator, :editor ]
    compact_flags :status => [:active, :draft, :pruned ]
  end

  # the corresponding getters and setters for all the boolean flags has been created
  u=User.new
  u.admin=true
  u.admin?     # <=  will return true
  u.moderator? # <=  will return false
  u.active = false  # <= set the value of active to false
  u.save

Named Scopes will also be automatically available for objects retrieval from the database.
Two names scopes will be available for each flag. with the plural name of the flag, and another one 
preceded with "not_".
Named scopes gives a suitable flexibility because they can be used in a cascaded style to build complex conditions

  User.admins
  User.not_moderators
  User.not_moderators.editors.admins
  
Other methods are also available to return the relevant condition part as a string, for concatenation with a condition string. those comes with the in the form of _where_ and _where_not_


  User.where_admin         # => "(roles & 1) > 0"
  User.where_not_admin     # => "(roles & 1) = 0"
  User.where_not_moderator # => "(roles & 2) = 0"


= Contributions

* Mahmoud Said aka modsaid (mahmoud@modsaid.com)
* Mostafa Ragab aka dr-click

